{{#if model.namespace}}package {{model.namespace}}

{{else}}
/**
* PLEASE ADD HERE THE PACKAGE NAMESAPCE
*/

{{/if}}
{{#if model.basepage.namespace}}import {{model.basepage.namespace}}
{{else}}// BasePageObject import might be needed
{{/if}}
import org.openqa.selenium.By
import org.openqa.selenium.Keys
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.support.FindBy

{{#if copyright.claimant}}
/*
* Copyright (c) {{copyright.year}}, {{copyright.claimant}}.
* All Rights Reserved.
*/
{{/if}}

/**
* Created by jcardona on {{{copyright.day}}}/{{{copyright.month}}}/{{{copyright.year}}}.
* By Katch LLC.
*/

public class {{model.name}} {{#if model.basepage.name}} extends {{model.basepage.name}}{{/if}} {

{{#attributes}}
{{#if attribute.strategy}}
    @FindBy({{attribute.strategy}} = "{{{attribute.value}}}")
    private {{#equals type 'radio'}}List<WebElement>{{else}}WebElement{{/equals}} {{attribute.value}}
{{else}}
    private final String {{attribute.name}} = "{{{attribute.value}}}";
{{/if}}
{{/attributes}}

    public {{model.name}}(WebDriver driver) {
        super(driver)
    }
{{#operations}}
    /**
    * {{#if argument}}{{argument.documentation}}{{else}}{{operation.documentation}}{{/if}}
    *
    * @return the {{default target.modelName @root.model.name}} class instance.
    */
    public {{default target.modelName @root.model.name}} {{operation.name}}() {
{{#if argument}}
    {{#unequals type 'radio'}}
            return {{operation.name}}(data.get("{{argument.key}}"));
            }

            /**
            * {{operation.documentation}}
            *
            * @return the {{default target.modelName @root.model.name}} class instance.
            */
            public {{default target.modelName @root.model.name}} {{operation.name}}(String {{argument.name}}) {
    {{/unequals}}
{{/if}}
{{#equals type 'button'}}
    {{attribute.name}}.click();
{{/equals}}
{{#equals type 'checkbox'}}
        if ({{#unless negate}}!{{/unless}}{{attribute.name}}.isSelected()) {
    {{attribute.name}}.click();
        }
{{/equals}}
{{#equals type 'fill'}}
    {{#fill}}
        {{operation.name}}();
    {{/fill}}
{{/equals}}
{{#equals type 'fill.submit'}}
        fill();
        return submit();
{{/equals}}
{{#equals type 'link'}}
    {{attribute.name}}.click();
{{/equals}}
{{#equals type 'radio'}}
    for (WebElement el : {{attribute.name}}) {
        if (el.getAttribute("value").equals({{argument.name}})) {
        if (!el.isSelected()) {
        el.click();
        }
        break;
        }
    }
{{/equals}}
{{#equals type 'select'}}
    new Select({{attribute.name}}).{{#if negate}}de{{/if}}selectByVisibleText({{argument.name}});
{{/equals}}
{{#equals type 'submit'}}
    {{target.name}}();
    {{#if target.modelName}}
        {{target.modelName}} target = new {{target.modelName}}(driver, data, timeout);
            PageFactory.initElements(driver, target);
    {{/if}}
{{/equals}}
{{#equals type 'text'}}
    {{attribute.name}}.sendKeys({{argument.name}});
{{/equals}}
{{#equals type 'verify.loaded'}}
    (new WebDriverWait(driver, timeout)).until(new ExpectedCondition<Boolean>() {
        public Boolean apply(WebDriver d) {
        return d.getPageSource().contains({{attribute.name}});
    }
    });
{{/equals}}
{{#equals type 'verify.url'}}
    (new WebDriverWait(driver, timeout)).until(new ExpectedCondition<Boolean>() {
        public Boolean apply(WebDriver d) {
        return d.getCurrentUrl().contains({{attribute.name}});
    }
    });
{{/equals}}
{{#unequals type 'fill.submit'}}
    return {{#if target.modelName}}target{{else}}this{{/if}};
{{/unequals}}
    }
{{/operations}}
    }
